#+TITLE: ericjohnson.org
#+OPTIONS: toc:2 num:nil ^:nil

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

#+begin_quote
  If you suffer as a Emacs Homepageian, do not be ashamed but praise
True Editor that you bear that name.

  -- fsbot (,praise)
#+end_quote

* prerequisites
  - install color-theme from your package manager, as recommended
  - install python-mode and ipython (with ipython.el) from your package manager
  - after a fresh clone, issue a git submodule update --init

* default directory and load path
#+begin_src emacs-lisp
(let ((default-directory (concat user-emacs-directory (convert-standard-filename "site-lisp/"))))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

* common libraries
** common lisp
#+begin_src emacs-lisp
(require 'cl)
#+end_src

** give buffers unique file names
#+begin_src emacs-lisp
(require 'uniquify)
#+end_src

** keep a list of recent files
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src

** save your place
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
#+end_src

* themes, colors, and other such stuff
** removing visual cruft
#+begin_src emacs-lisp
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq inhibit-spash-screen t)
(setq inhibit-startup-message t)
#+end_src

** color theme
make sure to install color-theme from your package manager as recommended
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/color-theme/color-theme.el")
(require 'color-theme)
(color-theme-initialize)
(setq color-theme-is-global t)
(add-to-list 'load-path "~/.emacs.d/src/twilight-emacs/color-theme-twilight.el")
(require 'color-theme-twilight)
(color-theme-twilight)
#+end_src

** wiki-mode for coloring
#+begin_src emacs-lisp
;; WikiCreole mode (wiki-mode)
;; Thanks to Alex Schroeder of www.emacswiki.org 
;; And Jason Blevins for his inspiring Markdown Mode
;; http://jblevins.org/projects/markdown-mode/
(define-generic-mode 'wiki-mode 
  nil ; comments 
  nil; keywords 
  '(("^\\(= \\)\\(.*?\\)\\($\\| =$\\)" . 'info-title-1)
    ("^\\(== \\)\\(.*?\\)\\($\\| ==$\\)" . 'info-title-2)
    ("^\\(=== \\)\\(.*?\\)\\($\\| ===$\\)" . 'info-title-3)
    ("^\\(====+ \\)\\(.*?\\)\\($\\| ====+$\\)" . 'info-title-4) 
    ("\\[\\[.*?\\]\\]" . 'link)
    ("\\[.*\\]" . 'link)
    ("\\[b\\].*?\\[/b\\]" . 'bold)
    ("\\[i\\].*?\\[/i\\]" . 'italic)
    ("\\*\\*.*?\\*\\*" . 'bold)
    ("\\*.*?\\*" . 'bold)
    ("\\_<//.*?//" . 'italic)
    ("\\_</.*?/" . 'italic)
    ("__.*?__" . 'italic)
    ("_.*?_" . 'underline)
    ("|+=?" . font-lock-string-face)
    ("\\\\\\\\[ \t]+" . font-lock-warning-face)) ; font-lock list
  '(".wiki\\'"); auto-mode-alist
  '((lambda () (require 'info) (require 'goto-addr))); function-list
  "Wiki stuff including Creole Markup and BBCode.")
#+end_src

* editing 
** evil
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src

** tabs are evil
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** max width for
   long-lines and column numbers enabled
#+begin_src emacs-lisp
(setq-default fill-column 100)
(column-number-mode 1)
#+end_src

** create latex layout
#+begin_src emacs-lisp
(defun split-window-three-parts ()
  "Split window into three parts."
  (interactive)
  (split-window-horizontally)
  (split-window-vertically)
)
#+end_src

** stash tilde files
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

* images
** image manipulation
#+begin_src emacs-lisp
(autoload 'eimp-mode "eimp" "Emacs Image Manipulation Package." t)
(add-hook 'image-mode-hook 'eimp-mode)
#+end_src

* eshell
** prompt modification
#+begin_src emacs-lisp
(defun host-name ()
  "Returns the name of the current host minus the domain."
  (let ((hostname (downcase (system-name))))
    (save-match-data
      (substring hostname (string-match "^[^.]+" hostname) (match-end 0)))))

(setq eshell-prompt-function
  (lambda ()
    (concat "\n" (eshell/pwd) "\n" 
            "[" (user-login-name) "@" (host-name) "]"
            (if (= (user-uid) 0) " # " " $ "))))
#+end_src
   
** set history size
#+begin_src emacs-lisp
(setq eshell-history-size 2048)
#+end_src

** history completion and save history on exit
#+begin_src emacs-lisp
(setq eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\|\\.bzr\\)/\\'")
#+end_src

** eshell stuff from eschulte starter kit (must dig into this to either rip out or keep)
#+begin_src emacs-lisp
(eval-after-load 'esh-opt
 '(progn
    (require 'em-cmpl)
    (require 'em-prompt)
    (require 'em-term)
    (setenv "PAGER" "less")
    (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook 
              '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-bol)))
    (add-to-list 'eshell-visual-commands "ssh")
    (add-to-list 'eshell-visual-commands "tail")
    (add-to-list 'eshell-command-completions-alist 
                 '("gunzip" "gz\\'"))
    (add-to-list 'eshell-command-completions-alist 
                 '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))
			))
  (setq eshell-directory-name
    (expand-file-name "./" (expand-file-name "eshell" user-emacs-directory)))
#+end_src

* doing things
** ido
#+begin_src emacs-lisp
(ido-mode t)
(setq ido-enable-flex-matching t)
#+end_src

* org mode 
** return follows link and turn off spell checker
#+begin_src emacs-lisp
(setq org-return-follows-link t)

(dolist (hook '(org-mode-hook))
(add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

** org-babel for C, R, ruby, python, latex, and plantuml (need jar file for this one)
   - not sure if this is needed
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (R . t)
   (ruby . t)
   (python . t)
   (latex . t)
   (octave . t)
   (haskell . t)
   (plantuml . t)
   (gnuplot . t)))
#+end_src

* programming
** python stuff
   - taken from http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
#+begin_src emacs-lisp
(setenv "PYTHONPATH" ".")
(require 'python-mode)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))

(require 'ipython)
#+end_src

** speaking statistics
#+begin_src emacs-lisp
;(require 'ess-site)
#+end_src

** c
#+begin_src emacs-lisp
(require 'cc-mode) 
  (add-to-list 'c-mode-common-hook
  (lambda () (setq c-syntactic-indentation nil)))
#+end_src

* browsing
** launching firefox
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+end_src

* keybindings
** increase text size
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** better grep
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-r") 'rgrep)
#+end_src

** finding files
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
(global-set-key (kbd "C-x F") 'find-file-at-point)
#+end_src

** launch eshell
#+begin_src emacs-lisp
(global-set-key (kbd "C-M-s") 'eshell)
#+end_src

** quick longlines 
#+begin_src emacs-lisp
(global-set-key (kbd "C-x M-l") 'longlines-mode)
#+end_src

** create working split
#+begin_src emacs-lisp
(global-set-key (kbd "C-x 4") 'split-window-three-parts)
#+end_src

** copy region as kill
#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'copy-region-as-kill)
#+end_src

** navigate images
#+begin_src emacs-lisp
(global-set-key (kbd "C-x M--") 'eimp-decrease-image-size)
(global-set-key (kbd "C-x M-+") 'eimp-increase-image-size)
(global-set-key (kbd "C-x M-= w") 'eimp-fit-image-width-to-window)
(global-set-key (kbd "C-x M-= h") 'eimp-fit-image-height-to-window)
(global-set-key (kbd "C-x M-= =") 'eimp-fit-image-to-window)
(global-set-key (kbd "C-x <M-left>") 'eimp-roll-image-left)
(global-set-key (kbd "C-x <M-right>") 'eimp-roll-image-right)
(global-set-key (kbd "C-x <M-up>") 'eimp-roll-image-up)
(global-set-key (kbd "C-x <M-down>") 'eimp-roll-image-down)
#+end_src

* things i don't have yet but want
color ps1 in eshell in a good way

pretty printing lambdas

repeated tab characters wherever i want them

syntax highlighted config scripts such as bashrc

* things i don't have that look interesting
plan9 smart shell

* notes and stuff


(setq js-auto-indent-flag nil)

;    (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)))
